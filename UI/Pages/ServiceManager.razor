@page "/service-control"
@using Microsoft.Extensions.Configuration
@using Blazored.LocalStorage
@using UI.Jobs
@inject ServiceController ServiceController
@inject PushSmsJob PushSmsJob
@inject IConfiguration Configuration
@inject ILocalStorageService LocalStorage

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-8 col-sm-10">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        <i class="fas fa-cogs"></i> Service Control
                    </h3>
                    <span class="badge badge-pill badge-light">@statusMessage</span>
                    <div>
                        <!-- Timer Display -->
                        <span class="badge badge-light" style="font-size: 1.2em;">@currentTime</span>
                    </div>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle"></i> @errorMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle"></i> @successMessage
                        </div>
                    }

                    <div class="d-flex justify-content-end my-4">
                        <button class="btn btn-success btn-sm mx-1" @onclick="StartService" disabled="@isServiceRunning">
                            <i class="fas fa-play"></i> Start
                        </button>
                        <button class="btn btn-danger btn-sm mx-1" @onclick="StopService" disabled="@(!isServiceRunning)">
                            <i class="fas fa-stop"></i> Stop
                        </button>
                    </div>

                    <!-- Message Counts Section -->
                    <div class="alert alert-info">
                        <div style="text-align:center;">
                            <h6><b>MESSAGE COUNTS (07:00 AM - 07:00 PM)</b></h6>
                        </div>
                        <strong>Processed Messages: </strong> @processedMessages <br />
                        <strong>Unsent Messages: </strong> @unsentMessages
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isServiceRunning = false;
    private string statusMessage = "Service not started.";
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private int processedMessages = 0;
    private int unsentMessages = 0;
    private string currentTime = DateTime.Now.ToString("HH:mm:ss");

    protected override async Task OnInitializedAsync()
    {
        // Retrieve the saved service state from LocalStorage
        isServiceRunning = await LocalStorage.GetItemAsync<bool>("isServiceRunning");
        statusMessage = isServiceRunning ? "Service is running." : "Service not started.";

        await GetMessageCounts();

        // Start a timer to periodically check service status and update current time
        var statusTimer = new System.Timers.Timer(10000); // Check every 10 seconds
        statusTimer.Elapsed += async (sender, e) => await CheckServiceStatus();
        statusTimer.Start();

        var timeTimer = new System.Timers.Timer(1000); // Update time every second
        timeTimer.Elapsed += (sender, e) => UpdateTime();
        timeTimer.Start();
    }

    private async Task CheckServiceStatus()
    {
        // Read the service status from LocalStorage
        isServiceRunning = await LocalStorage.GetItemAsync<bool>("isServiceRunning");
        statusMessage = isServiceRunning ? "Service is running." : "Service not started.";

        // Ensure StateHasChanged is called on the UI thread
        await InvokeAsync(() => StateHasChanged());
    }

    private void UpdateTime()
    {
        // Update current time every second
        currentTime = DateTime.Now.ToString("HH:mm:ss");
        InvokeAsync(StateHasChanged);
    }

    private async Task StartService()
    {
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Start the PushSmsJob service using ServiceController
            await ServiceController.StartPushSmsJobAsync();

            if (!PushSmsJob.IsConfigLoaded)
            {
                errorMessage = PushSmsJob.ErrorMessage ?? "Database configuration is missing.";
                statusMessage = "Service failed to start.";
                return;
            }

            isServiceRunning = true;
            statusMessage = "Service is running.";
            successMessage = "The SMS service started successfully.";

            // Save the service state to LocalStorage
            await LocalStorage.SetItemAsync("isServiceRunning", isServiceRunning);

            // Fetch message counts after starting the service
            await GetMessageCounts();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to start service: {ex.Message}";
            statusMessage = "Service failed to start.";
        }
    }

    private async Task StopService()
    {
        try
        {
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Stop the PushSmsJob service using ServiceController
            await ServiceController.StopPushSmsJobAsync();

            isServiceRunning = false;
            statusMessage = "Service stopped successfully.";
            successMessage = "The SMS service has been stopped.";

            // Save the service state to LocalStorage
            await LocalStorage.SetItemAsync("isServiceRunning", isServiceRunning);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to stop service: {ex.Message}";
            statusMessage = "Service failed to stop.";
        }
    }

    private async Task GetMessageCounts()
    {
        try
        {
            var connectionString = Configuration.GetValue<string>("ConnectionString");

            if (string.IsNullOrEmpty(connectionString))
            {
                errorMessage = "Connection string is not configured.";
                return;
            }

            var query = "SELECT COUNT(*) FROM MyTable WHERE SMS_transmitted_on IS NOT NULL;" +
                        "SELECT COUNT(*) FROM MyTable WHERE SMS_transmitted_on IS NULL;";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    using (SqlDataReader reader = await command.ExecuteReaderAsync())
                    {
                        if (reader.HasRows)
                        {
                            await reader.ReadAsync();
                            processedMessages = reader.GetInt32(0);

                            await reader.NextResultAsync();
                            await reader.ReadAsync();
                            unsentMessages = reader.GetInt32(0);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching message counts: {ex.Message}";
        }
    }
}
