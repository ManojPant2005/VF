@page "/database-configuration"
@using System.IO
@using System.Text.Json
@inject ILogger<DatabaseConfiguration> Logger
@inject DatabaseService DatabaseService
@using Oracle.ManagedDataAccess.Client;



<h3>Manage and Configure Database</h3>
<div class="card p-4 mb-4">
    <div class="form-group">
        <label for="databaseName">Database Name <span class="text-danger">*</span></label>
        <input type="text" id="databaseName" class="form-control" @bind="databaseName" />
        @if (string.IsNullOrWhiteSpace(databaseName))
        {
            <div class="text-danger">Database Name is required.</div>
        }
    </div>

    <div class="form-group">
        <label for="databaseType">Database Type <span class="text-danger">*</span></label>
        <select id="databaseType" class="form-control" @bind="selectedDatabaseType">
            <option value="">Select Database Type</option>
            <option value="SQLServer">SQL Server</option>
            <option value="MySQL">MySQL</option>
            <option value="Oracle">Oracle</option>
            <option value="SQLite">SQLite</option>
        </select>
        @if (string.IsNullOrWhiteSpace(selectedDatabaseType))
        {
            <div class="text-danger">Database Type is required.</div>
        }
    </div>

    @if (selectedDatabaseType == "Oracle")
    {
        <div class="form-group">
            <label for="oracleServiceName">Service Name <span class="text-danger">*</span></label>
            <input type="text" id="oracleServiceName" class="form-control" @bind="oracleServiceName" />
            @if (string.IsNullOrWhiteSpace(oracleServiceName))
            {
                <div class="text-danger">Service Name is required.</div>
            }

            <label for="oracleDataSource">Oracle Data Source <span class="text-danger">*</span></label>
            <input type="text" id="oracleDataSource" class="form-control" @bind="oracleDataSource" />
            @if (string.IsNullOrWhiteSpace(oracleDataSource))
            {
                <div class="text-danger">Data Source is required.</div>
            }

            <label for="oracleUsername">Username <span class="text-danger">*</span></label>
            <input type="text" id="oracleUsername" class="form-control" @bind="oracleUsername" />
            @if (string.IsNullOrWhiteSpace(oracleUsername))
            {
                <div class="text-danger">Username is required.</div>
            }

            <label for="oraclePassword">Password <span class="text-danger">*</span></label>
            <input type="password" id="oraclePassword" class="form-control" @bind="oraclePassword" />
            @if (string.IsNullOrWhiteSpace(oraclePassword))
            {
                <div class="text-danger">Password is required.</div>
            }
        </div>
    }


    @if (selectedDatabaseType == "SQLServer")
    {
        <div class="form-group">
            <label>Authentication Mode</label>
            <div>
                <div class="form-check">
                    <input type="radio" id="sqlAuth" name="authMode" class="form-check-input" value="SQL" @onchange="OnAuthenticationModeChanged" />
                    <label class="form-check-label" for="sqlAuth">SQL Server Authentication</label>
                </div>
                <div class="form-check">
                    <input type="radio" id="windowsAuth" name="authMode" class="form-check-input" value="Windows" @onchange="OnAuthenticationModeChanged" />
                    <label class="form-check-label" for="windowsAuth">Windows Authentication</label>
                </div>
            </div>

            <label for="serverName">Server Name</label>
            <input type="text" id="serverName" class="form-control" @bind="serverName" />

            @if (isSQLAuthSelected)
            {
                <label for="username">Username</label>
                <input type="text" id="username" class="form-control" @bind="username" />

                <label for="password">Password</label>
                <input type="password" id="password" class="form-control" @bind="password" />
            }

            <div class="form-check">
                <input type="checkbox" id="trustServerCertificate" class="form-check-input" @bind="trustServerCertificate" />
                <label class="form-check-label" for="trustServerCertificate">Trust Server Certificate</label>
            </div>
        </div>
    }
</div>

<div class="card p-4 mb-4">
    <h4>Table Configuration</h4>
    <div class="form-group">
        <label for="tableName">Table Name <span class="text-danger">*</span></label>
        <input type="text" id="tableName" class="form-control" @bind="tableName" />
        @if (string.IsNullOrWhiteSpace(tableName))
        {
            <div class="text-danger">Table Name is required.</div>
        }
    </div>

    <h5>Select Columns</h5>
    <div class="form-check">
        <input type="checkbox" id="SmsID" class="form-check-input" disabled checked />
        <label class="form-check-label" for="SmsID">SmsID (Primary Key)</label>
    </div>
    @foreach (var column in possibleColumns.Where(c => c != "SmsID"))
    {
        <div class="form-check d-flex align-items-center mb-2">
            <input type="checkbox" id="@column" class="form-check-input" @bind="@columnSelections[column]" />
            <label class="form-check-label mr-2" for="@column" style="width: 160px;">@column</label>
            @if (columnSelections[column])
            {
                <input type="text" class="form-control form-control-sm ml-2" placeholder="Custom Column Name" @bind="@customColumnNames[column]" style="flex-grow: 1; width: 250px;" />
            }
        </div>
    }
</div>

<button class="btn btn-primary" @onclick="OnConfirm" disabled="@IsFormInvalid">Confirm</button>
<p>@statusMessage</p>

@code {
    private string selectedDatabaseType = "";
    private string serverName = "";
    private string databaseName = "";
    private string username = "";
    private string password = "";
    private bool trustServerCertificate = false;
    private string authenticationMode = "SQL"; // "SQL" or "Windows"
    private string tableName = "";
    private string statusMessage = "";

    private string oracleDataSource = "";
    private string oracleUsername = "";
    private string oraclePassword = "";
    private string oracleServiceName = "";


    [Inject] private DatabaseConfigService DatabaseConfigService { get; set; }

    private bool IsFormInvalid => string.IsNullOrWhiteSpace(selectedDatabaseType) || string.IsNullOrWhiteSpace(tableName);

    private bool isSQLAuthSelected => authenticationMode == "SQL";

    private void OnAuthenticationModeChanged(ChangeEventArgs e)
    {
        authenticationMode = e.Value.ToString();
    }

    private Dictionary<string, string> GetOracleColumnNames()
    {
        return new Dictionary<string, string>
    {
        { "SmsID", "SmsID" },  // Always keep the primary key consistent
        { "MobileNumber", string.IsNullOrWhiteSpace(customColumnNames["MobileNumber"]) ? "MobileNumber" : customColumnNames["MobileNumber"] },
        { "MessageText", string.IsNullOrWhiteSpace(customColumnNames["MessageText"]) ? "MessageText" : customColumnNames["MessageText"] },
        { "SMS_process_on", string.IsNullOrWhiteSpace(customColumnNames["SMS_process_on"]) ? "SMS_process_on" : customColumnNames["SMS_process_on"] },
        { "SMS_transmitted_on", string.IsNullOrWhiteSpace(customColumnNames["SMS_transmitted_on"]) ? "SMS_transmitted_on" : customColumnNames["SMS_transmitted_on"] },
        { "DLR_process_on", string.IsNullOrWhiteSpace(customColumnNames["DLR_process_on"]) ? "DLR_process_on" : customColumnNames["DLR_process_on"] },
        { "DLR_transmitted_on", string.IsNullOrWhiteSpace(customColumnNames["DLR_transmitted_on"]) ? "DLR_transmitted_on" : customColumnNames["DLR_transmitted_on"] },
        { "DLR_status", string.IsNullOrWhiteSpace(customColumnNames["DLR_status"]) ? "DLR_status" : customColumnNames["DLR_status"] },
        { "Error_code", string.IsNullOrWhiteSpace(customColumnNames["Error_code"]) ? "Error_code" : customColumnNames["Error_code"] },
        { "Retry_count", string.IsNullOrWhiteSpace(customColumnNames["Retry_count"]) ? "Retry_count" : customColumnNames["Retry_count"] }
    };
    }



    private List<string> possibleColumns = new List<string>
    {
        "SmsID",
        "MobileNumber",
        "MessageText",
        "SMS_process_on",
        "SMS_transmitted_on",
        "DLR_process_on",
        "DLR_transmitted_on",
        "DLR_status",
        "Error_code",
        "Retry_count"
    };


    private Dictionary<string, bool> columnSelections = new Dictionary<string, bool>
    {
        {"SmsID", true},
        {"MobileNumber", false},
        {"MessageText", false},
        {"SMS_process_on", false},
        {"SMS_transmitted_on", false},
        {"DLR_process_on", false},
        {"DLR_transmitted_on", false},
        {"DLR_status", false},
        {"Error_code", false},
        {"Retry_count", false}
    };

    private Dictionary<string, string> customColumnNames = new Dictionary<string, string>
    {
        {"MobileNumber", ""},
        {"MessageText", ""},
        {"SMS_process_on", ""},
        {"SMS_transmitted_on", ""},
        {"DLR_process_on", ""},
        {"DLR_transmitted_on", ""},
        {"DLR_status", ""},
        {"Error_code", ""},
        {"Retry_count", ""}
    };


    protected override void OnInitialized()
    {
        customColumnNames = new Dictionary<string, string>
        {
            { "SmsID", "" },
            { "MobileNumber", "" },
            { "MessageText", "" },
            { "SMS_process_on", "" },
            { "SMS_transmitted_on", "" },
            { "DLR_process_on", "" },
            { "DLR_transmitted_on", "" },
            { "DLR_status", "" },
            { "Error_code", "" },
            { "Retry_count", "" }
        };
    }



    private async Task OnConfirm()
    {
        if (IsFormInvalid)
        {
            statusMessage = "Please fill in all required fields.";
            return;
        }

        if (selectedDatabaseType == "Oracle")
        {
            // Construct the connection string for the new user
            var connectionString = $"User Id=manoj;Password={oraclePassword};Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=orcl)));";
            Console.WriteLine($"Oracle Connection String: {connectionString}");

            try
            {
                // Test Oracle connection
                var connectionTestResult = await DatabaseService.TestOracleConnectionAsync(connectionString);
                if (!connectionTestResult)
                {
                    statusMessage = "Oracle connection test failed. Please check the Data Source, Username, and Password.";
                    return;
                }

                // Proceed with creating the table and stored procedures
                // Fetch column names for Oracle stored procedures
                var columnNames = GetOracleColumnNames();
                var columnDataTypes = GetOracleColumnDataTypes(); // Fetch the data types

                var tableCreated = await DatabaseService.CreateOracleTableAsync(
                    connectionString,
                    tableName,
                    columnNames,
                    columnDataTypes
                );

                if (!tableCreated)
                {
                    statusMessage = "Failed to create the table in Oracle.";
                    return;
                }

                // Create stored procedures for Oracle
                var storedProceduresCreated = await DatabaseService.CreateOracleStoredProceduresAsync(
                    connectionString,
                    tableName,
                    columnNames["SmsID"],
                    columnNames["MobileNumber"],
                    columnNames["MessageText"],
                    columnNames["SMS_process_on"],
                    columnNames["SMS_transmitted_on"]
                );

                if (!storedProceduresCreated)
                {
                    statusMessage = "Failed to create stored procedures in Oracle.";
                    return;
                }

                // Save Oracle configuration to JSON
                var configSaved = await DatabaseService.SaveConfigurationToJsonAsync(connectionString, tableName, columnNames, selectedDatabaseType);
                if (!configSaved)
                {
                    statusMessage = "Failed to save Oracle configuration.";
                    return;
                }

                statusMessage = "Oracle configuration saved successfully.";
            }
            catch (Exception ex)
            {
                statusMessage = $"Oracle connection failed: {ex.Message}";
            }
        }
        else if (selectedDatabaseType == "SQLServer")
        {
            var connectionString = DatabaseService.GenerateConnectionString(serverName, null, username, password, isSQLAuthSelected, trustServerCertificate);
            Console.WriteLine($"Connection String (without database): {connectionString}");

            // Test SQL connection
            var connectionTestResult = await DatabaseService.TestSqlConnectionAsync(connectionString);
            if (!connectionTestResult)
            {
                statusMessage = "Connection test failed. Please check the server details.";
                return;
            }

            // Create database if it doesn't exist
            var databaseCreated = await DatabaseService.CreateDatabaseIfNotExistsAsync(connectionString, databaseName);
            if (!databaseCreated)
            {
                statusMessage = "Failed to create the database.";
                return;
            }

            // Define required columns and user-defined mappings
            var userDefinedColumns = columnSelections
                .Where(c => c.Value)
                .Select(c => new { Original = c.Key, CustomName = GetCustomColumnName(c.Key) })
                .ToList();

            var requiredColumns = new Dictionary<string, string>
        {
            { "SmsID", "SmsID" },
            { "MobileNumber", "MobileNumber" },
            { "MessageText", "MessageText" },
            { "SMS_process_on", "SMS_process_on" },
            { "SMS_transmitted_on", "SMS_transmitted_on" },
            { "DLR_process_on", "DLR_process_on" },
            { "DLR_transmitted_on", "DLR_transmitted_on" },
            { "DLR_status", "DLR_status" },
            { "Error_code", "Error_code" },
            { "Retry_count", "Retry_count" }
        };

            // Map columns
            var columnMappings = requiredColumns.ToDictionary(
                kvp => kvp.Key,
                kvp => userDefinedColumns.FirstOrDefault(c => c.Original == kvp.Value)?.CustomName ?? kvp.Value
            );

            // Check for missing columns
            var missingRequiredColumns = requiredColumns
                .Where(kvp => kvp.Key != "SmsID" && string.IsNullOrWhiteSpace(columnMappings[kvp.Key]))
                .Select(kvp => kvp.Key)
                .ToList();

            if (missingRequiredColumns.Any())
            {
                statusMessage = $"Required columns missing: {string.Join(", ", missingRequiredColumns)}. Please ensure all necessary columns are selected.";
                return;
            }

            // Ensure "SmsID" is always mapped
            if (string.IsNullOrWhiteSpace(columnMappings["SmsID"]))
            {
                columnMappings["SmsID"] = "SmsID";
            }

            // Log the column mappings
            Console.WriteLine("Column mappings:");
            foreach (var mapping in columnMappings)
            {
                Console.WriteLine($"Original: {mapping.Key}, Custom: {mapping.Value}");
            }

            // Generate connection string with the database name
            var connectionStringWithDb = DatabaseService.GenerateConnectionString(serverName, databaseName, username, password, isSQLAuthSelected, trustServerCertificate);
            Console.WriteLine($"Connection String (with database): {connectionStringWithDb}");

            // Create the table
            var tableCreated = await DatabaseService.CreateTableAsync(connectionStringWithDb, tableName, columnMappings);
            if (!tableCreated)
            {
                statusMessage = "Failed to create the table.";
                return;
            }

            // Create the stored procedures
            var storedProceduresCreated = await DatabaseService.CreateSqlStoredProceduresAsync(
                connectionStringWithDb,
                tableName,
                columnMappings["SmsID"],
                columnMappings["MobileNumber"],
                columnMappings["MessageText"],
                columnMappings["SMS_process_on"],
                columnMappings["SMS_transmitted_on"]
            );

            if (!storedProceduresCreated)
            {
                statusMessage = "Failed to create stored procedures.";
                return;
            }

            // Save SQL Server configuration to JSON
            var configSaved = await DatabaseService.SaveConfigurationToJsonAsync(
                connectionStringWithDb,
                tableName,
                columnMappings,
                selectedDatabaseType // Pass the selected database type here
            );

            if (!configSaved)
            {
                statusMessage = "Failed to save configuration.";
                return;
            }

            statusMessage = "Database, table, and stored procedures created successfully. Configuration saved to JSON.";
        }
    }

    // Helper method to define column mappings
    private Dictionary<string, string> GetColumnMappings()
    {
        // Define the mappings for columns
        return new Dictionary<string, string>
    {
    { "SmsID", "NUMBER" },
    { "MobileNumber", "VARCHAR2(15)" }, // Assuming a mobile number can be 15 characters
    { "MessageText", "VARCHAR2(255)" },
    { "SMS_process_on", "DATE" },
    { "SMS_transmitted_on", "DATE" },
    { "DLR_process_on", "DATE" },
    { "DLR_transmitted_on", "DATE" },
    { "DLR_status", "VARCHAR2(50)" },
    { "Error_code", "VARCHAR2(50)" },
    { "Retry_count", "NUMBER" }
    };
    }


    // Adjust the method to return data types (for table creation)
    private Dictionary<string, string> GetOracleColumnDataTypes()
    {
        return new Dictionary<string, string>
    {
        { "SmsID", "NUMBER" },
        { "MobileNumber", "VARCHAR2(15)" }, // Assuming a mobile number can be 15 characters
        { "MessageText", "VARCHAR2(255)" },
        { "SMS_process_on", "DATE" },
        { "SMS_transmitted_on", "DATE" },
        { "DLR_process_on", "DATE" },
        { "DLR_transmitted_on", "DATE" },
        { "DLR_status", "VARCHAR2(50)" },
        { "Error_code", "VARCHAR2(50)" },
        { "Retry_count", "NUMBER" }
    };
    }

    private string GetCustomColumnName(string columnName)
    {
        return customColumnNames.TryGetValue(columnName, out var customName) && !string.IsNullOrWhiteSpace(customName) ? customName : columnName;
    }


    public class DatabaseConfig
    {
        public string DatabaseName { get; set; }
        public string DatabaseType { get; set; }
        public string ServerName { get; set; }
        public string AuthenticationType { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public bool TrustServerCertificate { get; set; }
        public string TableName { get; set; }
        public List<ColumnMapping> ColumnMappings { get; set; }
    }

    public class ColumnMapping
    {
        public string ColumnName { get; set; }
        public string CustomName { get; set; }
    }
}